<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()

globalvar hud_blue;
hud_blue = make_colour_rgb(127,201,255);

globalvar grid;
grid = mp_grid_create(0, 0, room_width div 32, room_height div 32, 32, 32);
mp_grid_add_instances(grid, obj_wall, false);

gp_deadzone = 0.25

score = 0

multiplier = 1

decrease_spawn_timer_rate = 120
time_until_next_decrease = decrease_spawn_timer_rate
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_is_connected(0)){
    if(gamepad_axis_value(0, gp_axislh) &gt; 0){
        obj_player.move_right = true
        obj_player.move_left = false
    }
    if(gamepad_axis_value(0, gp_axislh) &lt; 0){
        obj_player.move_left = true
        obj_player.move_right = false
    }
    if(gamepad_axis_value(0, gp_axislv) &gt; 0){
        obj_player.move_down = true
        obj_player.move_up = false
    }
    if(gamepad_axis_value(0, gp_axislv) &lt; 0){
        obj_player.move_up = true
        obj_player.move_down = false
    }
    
    obj_player.hspeed_mod = abs(gamepad_axis_value(0, gp_axislh))
    obj_player.vspeed_mod = abs(gamepad_axis_value(0, gp_axislv))
    
    if((gamepad_axis_value(0, gp_axislh) &lt; gp_deadzone &amp;&amp; gamepad_axis_value(0,gp_axislh) &gt; -gp_deadzone)
        &amp;&amp; (gamepad_axis_value(0, gp_axislv) &lt; gp_deadzone &amp;&amp; gamepad_axis_value(0, gp_axislv) &gt; -gp_deadzone)){
        obj_player.move_up = false
        obj_player.move_down = false
        obj_player.move_left = false
        obj_player.move_right = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_is_connected(0)){
    if((gamepad_axis_value(0, gp_axisrh) &gt; gp_deadzone || gamepad_axis_value(0, gp_axisrh) &lt; -gp_deadzone) || 
            (gamepad_axis_value(0, gp_axisrv) &gt; gp_deadzone || gamepad_axis_value(0, gp_axisrv) &lt; -gp_deadzone)){
        obj_player.facing_direction = point_direction(obj_player.x, obj_player.y, obj_player.x + gamepad_axis_value(0, gp_axisrh), obj_player.y+gamepad_axis_value(0, gp_axisrv))
        obj_player.shooting = true
    }else{
        obj_player.shooting = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_is_connected(0)){
    if(gamepad_button_check_released(0,gp_face2)){
        if(obj_player.shield_count &gt; 0 &amp;&amp; !obj_player.using_shield){
            obj_player.using_shield = true
            obj_player.shield_count--
            obj_player.shield_health = obj_player.default_shield_health
            audio_play_sound(snd_shield_up,1,false)
        }
    }
    if(gamepad_button_check_released(0,gp_face1)){
        if(obj_player.bomb_count &gt; 0){
            obj_player.bomb_count--
            instance_create(obj_player.x,obj_player.y,obj_bomb)
        }
    }
    if(gamepad_button_check_released(0,gp_face3)){
        if(obj_player.bomb_count &gt; 0){
            obj_player.bomb_count--
            instance_create(obj_player.x,obj_player.y,obj_bomb_decoy)
        }
    }
    if(gamepad_button_check_pressed(0,gp_shoulderrb)){
        if(!obj_player.dashing){
            obj_player.charging_dash = true
        }
    }
    
    if(gamepad_button_check_released(0,gp_shoulderrb)){
        if(!obj_player.dashing){
            obj_player.charging_dash = false
            obj_player.dashing = true
            obj_player.dash_direction = obj_player.facing_direction
            obj_player.dash_duration = obj_player.default_dash_duration * obj_player.dash_power
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard/mouse code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!gamepad_is_connected(0)){
    if(keyboard_check_pressed(ord("D"))){   
        obj_player.move_right = true
        obj_player.move_left = false
    }
    if(keyboard_check_pressed(ord("A"))){    
        obj_player.move_left = true
        obj_player.move_right = false
    }
    if(keyboard_check_pressed(ord("S"))){  
        obj_player.move_down = true
        obj_player.move_up = false
    }
    if(keyboard_check_pressed(ord("W"))){   
        obj_player.move_up = true
        obj_player.move_down = false
    }
    
    if((obj_player.move_left &amp;&amp; obj_player.move_down) || (obj_player.move_right &amp;&amp; obj_player.move_down) || (obj_player.move_left &amp;&amp; obj_player.move_up) || (obj_player.move_right &amp;&amp; obj_player.move_up)){
        obj_player.hspeed_mod = abs(dcos(45))
        obj_player.vspeed_mod = abs(dsin(45))
    }else{
        obj_player.vspeed_mod = 1 
        obj_player.hspeed_mod = 1    
    }
    
    if(keyboard_check_released(ord("D"))){
        obj_player.move_right = false
    }
    if(keyboard_check_released(ord("A"))){
        obj_player.move_left = false
    }
    if(keyboard_check_released(ord("S"))){
        obj_player.move_down = false
    }
    if(keyboard_check_released(ord("W"))){
        obj_player.move_up = false
    }   
    
    if(keyboard_check_released(vk_shift)){
        if(obj_player.shield_count &gt; 0 &amp;&amp; !obj_player.using_shield){
            obj_player.using_shield = true
            obj_player.shield_count--
            obj_player.shield_health = obj_player.default_shield_health
            audio_play_sound(snd_shield_up,1,false)
        }
    }
    if(keyboard_check_released(vk_space)){
        if(obj_player.bomb_count &gt; 0){
            obj_player.bomb_count--
            instance_create(obj_player.x,obj_player.y,obj_bomb)
        }
    }
    if(keyboard_check_released(ord("V"))){
        if(obj_player.bomb_count &gt; 0){
            obj_player.bomb_count--
            instance_create(obj_player.x,obj_player.y,obj_bomb_decoy)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!gamepad_is_connected(0)){
    obj_player.facing_direction = point_direction(obj_player.x, obj_player.y, mouse_x, mouse_y)
    if(mouse_check_button_pressed(mb_left)){
        obj_player.shooting = true
    }
    if(mouse_check_button_released(mb_left)){
        obj_player.shooting = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawner code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(time_until_next_decrease &lt;= 0){
    with(obj_spawner){
        if(spawn_rate-5 &gt;= 30){
            spawn_rate -= 5
        }
    }
    time_until_next_decrease = decrease_spawn_timer_rate
}

if(time_until_next_decrease &gt; 0){
    time_until_next_decrease--
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0)
draw_set_halign(fa_right)
draw_set_valign(fa_center)

//score
draw_rectangle_colour(view_wview - 136, 2, view_wview-2, 30, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 134, 4, view_wview-4, 28, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
draw_text_colour(view_wview - 12, 16, string(score),global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue,1)

//multiplier
draw_rectangle_colour(view_wview - 136, 34, view_wview-2, 62, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 134, 36, view_wview-4, 60, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
draw_text_colour(view_wview - 12, 48, string(multiplier)+"x",global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue,1)

//shields
draw_rectangle_colour(view_wview - 104, view_hview-4, view_wview-4, view_hview-72, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 102, view_hview-6, view_wview-6, view_hview-70, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
if(obj_player.shield_count &gt; 0){
    draw_sprite_ext(spr_power_up_shield,0,view_wview - 38, view_hview - 38,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else{
    draw_sprite_ext(spr_power_up_shield_shadow,0,view_wview - 38, view_hview - 38,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
if(gamepad_is_connected(0)){
    draw_sprite_ext(hud_b_button,0, view_wview-10, view_hview-10, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else{
    draw_sprite_ext(hud_shift_key,0, view_wview-20, view_hview-10, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
draw_text_colour(view_wview - 70, view_hview - 38,string(obj_player.shield_count),global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue,1)

//bombs
draw_rectangle_colour(view_wview - 210, view_hview-4, view_wview-110, view_hview-72, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 208, view_hview-6, view_wview-112, view_hview-70, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
if(obj_player.bomb_count &gt; 0){
    draw_sprite_ext(spr_power_up_bomb,0,view_wview - 144, view_hview - 38,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else{
    draw_sprite_ext(spr_power_up_bomb_shadow,0,view_wview - 144, view_hview - 38,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
if(gamepad_is_connected(0)){
    draw_sprite_ext(hud_a_button,0, view_wview-116, view_hview-10, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else{
    draw_sprite_ext(hud_space_key,0, view_wview-126, view_hview-10, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
draw_text_colour(view_wview - 176, view_hview - 38,string(obj_player.bomb_count),global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!gamepad_is_connected(0)){    
    if(collision_rectangle(mouse_x-8,mouse_y-8,mouse_x+8,mouse_y+8,obj_enemy,true,true)){
        draw_sprite_ext(spr_cursor_shadow,image_index,mouse_x,mouse_y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
        draw_sprite_ext(spr_cursor_red,image_index,mouse_x,mouse_y-4,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }else if(collision_rectangle(mouse_x-8,mouse_y-8,mouse_x+8,mouse_y+8,obj_wall,true,true)){
        draw_sprite_ext(spr_cursor_shadow,image_index,mouse_x,mouse_y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
        draw_sprite_ext(spr_cursor_bad,image_index,mouse_x,mouse_y-4,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }else{
        draw_sprite_ext(spr_cursor_shadow,image_index,mouse_x,mouse_y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
        draw_sprite_ext(spr_cursor_blue,image_index,mouse_x,mouse_y-4,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }
}

draw_sprite_ext(hud_health_bar,obj_player.current_health,obj_player.x,obj_player.y-32,image_xscale,image_yscale,image_angle,image_blend,image_alpha)

if(obj_player.using_shield){
    draw_sprite_ext(hud_shield_bar,obj_player.shield_health,obj_player.x,obj_player.y+32,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
