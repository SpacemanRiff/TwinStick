<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_supervisor</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()

globalvar hud_blue;
hud_blue = make_colour_rgb(127,201,255);

globalvar hud_red;
hud_red = make_colour_rgb(204,102,102);

globalvar hud_green;
hud_green = make_colour_rgb(124,191,95);

globalvar scale;
scale = 16;

globalvar grid;
grid = mp_grid_create(0, 0, room_width div 32, room_height div 32, 32, 32);
mp_grid_add_instances(grid, obj_wall, false);

gp_deadzone = 0.40

score = 0

multiplier = 1

decrease_spawn_timer_rate = 150
time_until_next_decrease = decrease_spawn_timer_rate

wave_count = 0
default_wave_increment = 10
number_of_enemies_in_wave = 0
enemies_left_in_wave = 0
enemies_left_to_spawn = 0
default_wave_delay = 240
time_until_next_wave = default_wave_delay

boss_wave_every = 5
number_of_boss_spawners = 0

fade = instance_create(0,0,fx_fade_in)

special_weapon = 0
time_until_special = 0
special_cool_down = 60
previous_cool_down = 60
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(time_until_special &gt; 0){
    time_until_special--
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_is_connected(0)){
    if(gamepad_axis_value(0, gp_axislh) &gt; 0){
        obj_player.move_right = true
        obj_player.move_left = false
    }
    if(gamepad_axis_value(0, gp_axislh) &lt; 0){
        obj_player.move_left = true
        obj_player.move_right = false
    }
    if(gamepad_axis_value(0, gp_axislv) &gt; 0){
        obj_player.move_down = true
        obj_player.move_up = false
    }
    if(gamepad_axis_value(0, gp_axislv) &lt; 0){
        obj_player.move_up = true
        obj_player.move_down = false
    }
    
    obj_player.hspeed_mod = abs(gamepad_axis_value(0, gp_axislh))
    obj_player.vspeed_mod = abs(gamepad_axis_value(0, gp_axislv))
    
    if((gamepad_axis_value(0, gp_axislh) &lt; gp_deadzone &amp;&amp; gamepad_axis_value(0,gp_axislh) &gt; -gp_deadzone)
        &amp;&amp; (gamepad_axis_value(0, gp_axislv) &lt; gp_deadzone &amp;&amp; gamepad_axis_value(0, gp_axislv) &gt; -gp_deadzone)){
        obj_player.move_up = false
        obj_player.move_down = false
        obj_player.move_left = false
        obj_player.move_right = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_is_connected(0)){
    if((gamepad_axis_value(0, gp_axisrh) &gt; gp_deadzone || gamepad_axis_value(0, gp_axisrh) &lt; -gp_deadzone) || 
            (gamepad_axis_value(0, gp_axisrv) &gt; gp_deadzone || gamepad_axis_value(0, gp_axisrv) &lt; -gp_deadzone)){
        obj_player.facing_direction = point_direction(obj_player.x, obj_player.y, obj_player.x + gamepad_axis_value(0, gp_axisrh), obj_player.y+gamepad_axis_value(0, gp_axisrv))
        obj_player.shooting = true
    }else{
        obj_player.shooting = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_is_connected(0)){
    if(gamepad_button_check_released(0,gp_face2)){
        if(obj_player.shield_count &gt; 0 &amp;&amp; !obj_player.using_shield){
            obj_player.using_shield = true
            obj_player.shield_count--
            obj_player.shield_health = obj_player.default_shield_health
            audio_play_sound(snd_shield_up,1,false)
        }
    }
    if(gamepad_button_check_released(0,gp_face1)){
        if(obj_player.bomb_count &gt; 0){
            obj_player.bomb_count--
            instance_create(obj_player.x,obj_player.y,obj_bomb)
        }
    }
    /*if(gamepad_button_check_released(0,gp_face3)){
        
    }*/
    if(gamepad_button_check_released(0,gp_face4)){
        if(!obj_player.dashing &amp;&amp; !obj_player.charging_dash){
            special_weapon = (special_weapon+1)%2
        }
    }
    /*if(gamepad_button_check_released(0,gp_face4)){
        if(obj_player.turret_count &gt; 0){
            obj_player.turret_count--
            instance_create(obj_player.x,obj_player.y,obj_anti_missile_turret)
        }
    }*/
    if(gamepad_button_check_pressed(0,gp_shoulderrb)){
        if(!obj_player.dashing &amp;&amp; time_until_special &lt;= 0){        
            if(special_weapon == 0){
                obj_player.charging_dash = true
            }else if(special_weapon == 1){
                instance_create(obj_player.x,obj_player.y,obj_bomb_decoy)
                time_until_special = special_cool_down * 8
                previous_cool_down = special_cool_down * 8
            }
        }
    }
    
    if(gamepad_button_check_released(0,gp_shoulderrb)){
        if(!obj_player.dashing &amp;&amp; obj_player.charging_dash){
            if(special_weapon == 0){
                obj_player.charging_dash = false
                obj_player.dashing = true
                obj_player.dash_direction = obj_player.facing_direction
                obj_player.dash_duration = obj_player.default_dash_duration * obj_player.dash_power
                time_until_special = special_cool_down * 3
                previous_cool_down = special_cool_down * 3
            }
        }
    }
    if(gamepad_button_check_pressed(0,gp_start)){
        if(!instance_exists(fx_fade_out)){
            fade_out = instance_create(0,0,fx_fade_out)
            fade_out.change_room = main_menu
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard/mouse code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!gamepad_is_connected(0)){
    if(keyboard_check_pressed(ord("D"))){   
        obj_player.move_right = true
        obj_player.move_left = false
    }
    if(keyboard_check_pressed(ord("A"))){    
        obj_player.move_left = true
        obj_player.move_right = false
    }
    if(keyboard_check_pressed(ord("S"))){  
        obj_player.move_down = true
        obj_player.move_up = false
    }
    if(keyboard_check_pressed(ord("W"))){   
        obj_player.move_up = true
        obj_player.move_down = false
    }
    
    if((obj_player.move_left &amp;&amp; obj_player.move_down) || (obj_player.move_right &amp;&amp; obj_player.move_down) || (obj_player.move_left &amp;&amp; obj_player.move_up) || (obj_player.move_right &amp;&amp; obj_player.move_up)){
        obj_player.hspeed_mod = abs(dcos(45))
        obj_player.vspeed_mod = abs(dsin(45))
    }else{
        obj_player.vspeed_mod = 1 
        obj_player.hspeed_mod = 1    
    }
    
    if(keyboard_check_released(ord("D"))){
        obj_player.move_right = false
    }
    if(keyboard_check_released(ord("A"))){
        obj_player.move_left = false
    }
    if(keyboard_check_released(ord("S"))){
        obj_player.move_down = false
    }
    if(keyboard_check_released(ord("W"))){
        obj_player.move_up = false
    }   
    
    if(keyboard_check_released(vk_shift)){
        if(obj_player.shield_count &gt; 0 &amp;&amp; !obj_player.using_shield){
            obj_player.using_shield = true
            obj_player.shield_count--
            obj_player.shield_health = obj_player.default_shield_health
            audio_play_sound(snd_shield_up,1,false)
        }
    }
    if(keyboard_check_released(vk_space)){
        if(obj_player.bomb_count &gt; 0){
            obj_player.bomb_count--
            instance_create(obj_player.x,obj_player.y,obj_bomb)
        }
    }
    if(keyboard_check_released(ord("V"))){
        if(obj_player.bomb_count &gt; 0){
            obj_player.bomb_count--
            instance_create(obj_player.x,obj_player.y,obj_bomb_decoy)
        }
    }
    if(keyboard_check_released(vk_escape)){
        if(!instance_exists(fx_fade_out)){
            fade_out = instance_create(0,0,fx_fade_out)
            fade_out.change_room = main_menu
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!gamepad_is_connected(0)){
    obj_player.facing_direction = point_direction(obj_player.x, obj_player.y, mouse_x, mouse_y)
    if(mouse_check_button_pressed(mb_left)){
        obj_player.shooting = true
    }
    if(mouse_check_button_released(mb_left)){
        obj_player.shooting = false
    }
    if(mouse_check_button_pressed(mb_right)){
        if(!obj_player.dashing){
            obj_player.charging_dash = true
        }
    }
    
    if(mouse_check_button_released(mb_right)){
        if(!obj_player.dashing &amp;&amp; obj_player.charging_dash){
            obj_player.charging_dash = false
            obj_player.dashing = true
            obj_player.dash_direction = obj_player.facing_direction
            obj_player.dash_duration = obj_player.default_dash_duration * obj_player.dash_power
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawner code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(enemies_left_in_wave &lt;= 0){
    if(time_until_next_wave &lt;= 0){
        wave_count++
        if(wave_count == 1){
            number_of_enemies_in_wave = default_wave_increment        
        }else{
            number_of_enemies_in_wave = floor(power(default_wave_increment, 1 + wave_count/10))
        }
        if(wave_count%boss_wave_every != 0 || number_of_boss_spawners &lt;= 0){
            enemies_left_in_wave = number_of_enemies_in_wave
            enemies_left_to_spawn = number_of_enemies_in_wave  
        }else{
            boss_has_spawned = false
            enemies_left_in_wave = ceil(number_of_enemies_in_wave / 4)
            enemies_left_to_spawn = ceil(number_of_enemies_in_wave / 4)
            while(!boss_has_spawned){
                with(obj_boss_spawn_pad){
                    if(irandom(other.number_of_boss_spawners-1) == 0 &amp;&amp; !other.boss_has_spawned){
                        instance_create(x,y,obj_enemy_boss)
                        other.boss_has_spawned = true
                        other.enemies_left_in_wave++
                    }
                }
            }
        }        
        //with(obj_spawner){
            //if(spawn_rate-10 &gt;= 30){
               //spawn_rate -= 10
            //}
        //} 
        time_until_next_wave = default_wave_delay
    }else{
        time_until_next_wave--
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0)
draw_set_valign(fa_center)

//waves
draw_set_halign(fa_left)
draw_rectangle_colour(view_wview/2 - 112, 2, view_wview/2 + 112, 30, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview/2 - 110, 4, view_wview/2 + 110, 28, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
draw_text_colour(view_wview/2 - 100 , 16, "Enemies Remaining:", global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue, 1)
draw_set_halign(fa_right)
draw_text_colour(view_wview/2 + 100 , 16, string(enemies_left_in_wave), global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue, 1)

draw_set_halign(fa_left)
draw_rectangle_colour(view_wview/2 - 48, 32, view_wview/2 + 48, 62, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview/2 - 46, 34, view_wview/2 + 46, 60, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
draw_text_colour(view_wview/2 - 36 , 48, "Wave:", global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue, 1)
draw_set_halign(fa_right)
draw_text_colour(view_wview/2 + 36 , 48, string(wave_count), global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue, 1)

if(enemies_left_in_wave &lt;= 0){
    draw_set_halign(fa_left)
    timer_text_color = global.hud_red
    if(floor((time_until_next_wave/default_wave_delay)*8)%2 == 1){
        timer_text_color = c_ltgray
    }
    draw_rectangle_colour(view_wview/2 - 48, 62, view_wview/2 + 48, 92, timer_text_color, timer_text_color, timer_text_color, timer_text_color, false)
    draw_rectangle_colour(view_wview/2 - 46, 64, view_wview/2 + 46, 90, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
    draw_text_colour(view_wview/2 - 36 , 78, "0:0" + string((time_until_next_wave/default_wave_delay)*4), timer_text_color, timer_text_color, timer_text_color, timer_text_color, 1)
}
if(enemies_left_in_wave &lt;= 0 &amp;&amp; (wave_count+1)%boss_wave_every == 0){
    draw_set_halign(fa_center)
    display_color = global.hud_red
    draw_rectangle_colour(view_wview/2 - 64, 94, view_wview/2 + 64, 124, display_color, display_color, display_color, display_color, false)
    draw_rectangle_colour(view_wview/2 - 62, 96, view_wview/2 + 62, 122, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
    draw_text_colour(view_wview/2, 109, "!Boss Wave!", display_color, display_color, display_color, display_color, 1)
}

draw_set_halign(fa_right)

//score
draw_rectangle_colour(view_wview - 136, 2, view_wview-2, 30, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 134, 4, view_wview-4, 28, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
draw_text_colour(view_wview - 12, 16, string(score),global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue,1)

//multiplier
draw_rectangle_colour(view_wview - 136, 34, view_wview-2, 62, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 134, 36, view_wview-4, 60, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
draw_text_colour(view_wview - 12, 48, string(multiplier)+"x",global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue,1)

//shields
draw_rectangle_colour(view_wview - 104, view_hview-14, view_wview-4, view_hview-82, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 102, view_hview-16, view_wview-6, view_hview-80, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
if(obj_player.shield_count &gt; 0){
    draw_sprite_ext(spr_power_up_shield,0,view_wview - 38, view_hview - 48,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else{
    draw_sprite_ext(spr_power_up_shield_shadow,0,view_wview - 38, view_hview - 48,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
if(gamepad_is_connected(0)){
    draw_sprite_ext(hud_b_button,gamepad_button_check(0, gp_face2), view_wview-10, view_hview-20, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else{
    draw_sprite_ext(hud_shift_key,0, view_wview-54, view_hview-12, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
draw_text_colour(view_wview - 70, view_hview - 48,string(obj_player.shield_count),global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue,1)

//bombs
draw_rectangle_colour(view_wview - 210, view_hview-14, view_wview-110, view_hview-82, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 208, view_hview-16, view_wview-112, view_hview-80, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
if(obj_player.bomb_count &gt; 0){
    draw_sprite_ext(spr_power_up_bomb,0,view_wview - 144, view_hview - 48,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else{
    draw_sprite_ext(spr_power_up_bomb_shadow,0,view_wview - 144, view_hview - 48,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
if(gamepad_is_connected(0)){
    draw_sprite_ext(hud_a_button,gamepad_button_check(0, gp_face1), view_wview-116, view_hview-20, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    //draw_sprite_ext(hud_x_button,0, view_wview-116, view_hview-76, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    //draw_sprite_ext(hud_decoy_ducky,0, view_wview-136, view_hview-76, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else{
    draw_sprite_ext(hud_space_key,0, view_wview-160, view_hview-12, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    //draw_sprite_ext(hud_v_key,0, view_wview-116, view_hview-76, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    //draw_sprite_ext(hud_decoy_ducky,0, view_wview-140, view_hview-76, image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
draw_text_colour(view_wview - 176, view_hview - 48,string(obj_player.bomb_count),global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue,1)

//special
draw_rectangle_colour(view_wview - 210, view_hview-88, view_wview-4, view_hview-156, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
draw_rectangle_colour(view_wview - 208, view_hview-90, view_wview-6, view_hview-154, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
if(special_weapon == 0){
    draw_sprite_ext(hud_dash,ceil((time_until_special*8)/previous_cool_down),view_wview - 160, view_hview - 122,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    draw_sprite_ext(spr_power_up_decoy_shadow,0,view_wview - 54, view_hview - 122,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}else if(special_weapon == 1){
    draw_sprite_ext(spr_power_up_dash_sprite,0,view_wview - 160, view_hview - 122,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    draw_sprite_ext(hud_decoy,ceil((time_until_special*8)/previous_cool_down),view_wview - 54, view_hview - 122,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
draw_sprite_ext(hud_cycle,0,view_wview - 116, view_hview - 152,image_xscale,image_yscale,special_weapon*90,image_blend,image_alpha)
draw_sprite_ext(hud_y_button,gamepad_button_check(0, gp_face4),view_wview - 96, view_hview - 152,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
draw_sprite_ext(hud_right_trigger,gamepad_button_check(0, gp_shoulderrb),view_wview - 106, view_hview - 112,image_xscale,image_yscale,image_angle,image_blend,image_alpha)

if(enemies_left_in_wave &lt;= 0){
    new_enemy_sprite = spr_enemy
    new_enemy_image_index = 2
    new_enemy = false
    switch(wave_count+1){
        case 1:
            new_enemy_sprite = spr_enemy
            new_enemy_image_index = 2
            new_enemy = true
            break;
        case 3:
            new_enemy_sprite = spr_enemy_scout
            new_enemy_image_index = 0
            new_enemy = true
            break;
        case 6:            
            new_enemy_sprite = spr_enemy_tank
            new_enemy_image_index = 5
            new_enemy = true
            break;
    }
    if(new_enemy){
        draw_set_halign(fa_center)  
        draw_rectangle_colour(2, view_hview - 2, 130, view_hview - 66, global.hud_blue, global.hud_blue, global.hud_blue, global.hud_blue, false)
        draw_rectangle_colour(4, view_hview - 4, 128, view_hview - 64, c_dkgray, c_dkgray, c_dkgray, c_dkgray, false)
        draw_text_colour(66,view_hview - 54, "New Enemy", global.hud_blue,global.hud_blue,global.hud_blue,global.hud_blue, 1)
        draw_sprite(new_enemy_sprite,new_enemy_image_index,24, view_hview - 24)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!gamepad_is_connected(0)){    
    if(collision_rectangle(mouse_x-8,mouse_y-8,mouse_x+8,mouse_y+8,obj_enemy,true,true)){
        draw_sprite_ext(spr_cursor_shadow,image_index,mouse_x,mouse_y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
        draw_sprite_ext(spr_cursor_red,image_index,mouse_x,mouse_y-4,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }else if(collision_rectangle(mouse_x-8,mouse_y-8,mouse_x+8,mouse_y+8,obj_wall,true,true)){
        draw_sprite_ext(spr_cursor_shadow,image_index,mouse_x,mouse_y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
        draw_sprite_ext(spr_cursor_bad,image_index,mouse_x,mouse_y-4,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }else{
        draw_sprite_ext(spr_cursor_shadow,image_index,mouse_x,mouse_y,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
        draw_sprite_ext(spr_cursor_blue,image_index,mouse_x,mouse_y-4,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }
}

draw_sprite_ext(hud_health_bar,obj_player.current_health,obj_player.x,obj_player.y-32,image_xscale,image_yscale,image_angle,image_blend,image_alpha)

if(obj_player.using_shield){
    draw_sprite_ext(hud_shield_bar,obj_player.shield_health,obj_player.x,obj_player.y+32,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
