<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_up = false
move_down = false
move_left = false
move_right = false
default_speed = 5
hspeed_mod = 0
vspeed_mod = 0

selected_weapon = 0
total_weapons = 2

smoke_rate = 2
delay_until_smoke = 0


firing_rate = 10
max_fire_rate = 15
min_fire_rate = 5
delay_until_shot = 0

flame_rate = 2
max_flame_rate = 2
min_flame_rate = 2
delay_until_flame = 0

current_heat = 0
max_heat = 500
heat_build = 1
heat_decay = 1

hover_height = 1

facing_direction = 0
shooting = false

last_direction_moved = 0

shot_count = 1
max_shot_count = 7

current_health = 8
max_health = 8

default_depth = depth

shield_count = 1
using_shield = false
shield_health = 0
default_shield_health = 4

bomb_count = 0

turret_count = 1

charging_dash = false
dashing = false
dash_power = 0
dash_speed = 15
dash_direction = 0
default_dash_duration = 30
dash_charge_speed = 0.05
dash_duration = 0

dead = false
dying = false

image_speed = 0
image_index = 0

light = instance_create(x,y,obj_light)
default_light_size = 15
light_size = default_light_size
light.light_size = light_size

camera = instance_create(x,y,obj_camera)
camera.x = x
camera.y = y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
if(!dying){
    if(!dashing){
        if(move_down){
            vspeed = default_speed * vspeed_mod * obj_supervisor.slowdown_amount
        }
        if(move_up){
            vspeed = -default_speed * vspeed_mod * obj_supervisor.slowdown_amount
        }
        if(move_right){
            hspeed = default_speed * hspeed_mod * obj_supervisor.slowdown_amount
        }
        if(move_left){
            hspeed = -default_speed * hspeed_mod * obj_supervisor.slowdown_amount
        }
        
        if(!move_left &amp;&amp; !move_right){
            hspeed = 0
        }
        if(!move_up &amp;&amp; !move_down){
            vspeed = 0
        }
        
    }else{
        hspeed = (dash_speed + dash_speed*(dash_duration/default_dash_duration)) * dash_power * dcos(dash_direction)  * obj_supervisor.slowdown_amount
        vspeed = (dash_speed + dash_speed*(dash_duration/default_dash_duration)) * dash_power * dsin(-dash_direction)  * obj_supervisor.slowdown_amount
        
        dash_duration--
        if(dash_duration &lt;= 0){
            dashing = false
            dash_power = 0
        }
    }
        
    if(abs(vspeed) &gt; 0 || abs(hspeed) &gt; 0){
        last_direction_moved = point_direction(x, y, x + hspeed, y + vspeed)
    }
    
    if(delay_until_smoke &lt;= 0){
        smoke = instance_create(x - 24 * dcos(last_direction_moved),y - 24 * dsin(-last_direction_moved), obj_smoke)
        smoke.direction = last_direction_moved + 180
        smoke.speed = 2
        smoke.scale = 5
        delay_until_smoke = smoke_rate
    } else {
        delay_until_smoke--
    }
    
    if(place_meeting(x+hspeed,y,obj_wall)){
        var move = sign(hspeed);
        repeat(abs(ceil(hspeed)))
            {
            if (place_free(x+move,y))
                {
                x += move;
                }
            else
                {
                break;
                }
            }
        hspeed = 0;
    }
    if(place_meeting(x,y+vspeed,obj_wall)){
        var move = sign(vspeed);
        repeat(abs(ceil(vspeed)))
            {
            if (place_free(x,y+move))
                {
                y += move;
                }
            else
                {
                break;
                }
            }
        vspeed = 0;
    }
    
    audio_listener_position(x,y,0)
    audio_listener_orientation(0,1,0,0,0,1);
    
    depth = default_depth - y/100000
}else{
    hspeed = 0
    vspeed = 0
}

light.x = x
light.y = y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shoot, boys
if(!dying){
    gamepad_set_vibration(0,0,0)
    switch selected_weapon{
        case 0:
            if(delay_until_shot &lt;= 0){
                if(shooting &amp;&amp; !charging_dash &amp;&amp; !dashing){        
                    for(i = -floor(shot_count/2); i &lt; ceil(shot_count/2); i++){
                        shot = instance_create(x,y,obj_bullet)
                        shot.parent_object = id
                        shot.direction = facing_direction + ((15 / ceil(shot_count/2)) * i)
                        shot.hover_height = hover_height
                        shot.range = 512
                        shot.o_x = x
                        shot.o_y = y
                        shot.from_player = true
                        //camera.shake = true
                    } 
                    audio_play_sound(snd_machine_gun_basic,1,false) 
                    delay_until_shot = firing_rate / obj_supervisor.slowdown_amount
                }
            }
            break
        
        case 1:
            if(delay_until_flame &lt;= 0 &amp;&amp; current_heat &lt; max_heat){
                if(shooting &amp;&amp; !charging_dash &amp;&amp; !dashing){        
                    for(i = -floor(shot_count/2); i &lt; ceil(shot_count/2); i++){
                        shot = instance_create(x,y,obj_flame)
                        shot.parent_object = id
                        shot.direction = facing_direction + 5 * random_range(-1,1) + ((10 / ceil(shot_count/2)) * i)
                        shot.hover_height = hover_height
                        shot.range = 512
                        shot.o_x = x
                        shot.o_y = y
                        shot.from_player = true
                        if(current_heat + heat_build &gt;= max_heat){
                            current_heat = max_heat
                        }else{
                            current_heat += heat_build
                        }
                        //camera.shake = true
                    } 
                    if(!audio_is_playing(snd_flame)){
                        audio_play_sound(snd_flame,1,false) 
                    }
                    delay_until_flame = flame_rate / obj_supervisor.slowdown_amount
                }
            }
            break
    }
    
    if(delay_until_shot &gt; 0){
        delay_until_shot --
    }
    
    if(delay_until_flame &gt; 0){
        delay_until_flame --
    }
    
    if(current_heat &gt; 0 &amp;&amp; (!shooting || selected_weapon != 1)){
        current_heat -= heat_decay
    }else if(current_heat &lt;= 0 &amp;&amp; (!shooting || selected_weapon != 1)){
        current_heat = 0
    }
    
    if(charging_dash){
        if(dash_power &lt; 1){
            dash_power+=dash_charge_speed
        }else{
            dash_power = 1
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///death
if(!dying &amp;&amp; current_health &lt;= 0){
    dying = true
    image_index = 0
    image_speed = 0.75
    sprite_index = fx_explosion
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///light code

light.light_size = light_size
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dashing = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_flak">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!dying){
    if(other.parent_object != id){
        if(!dashing){
            if(using_shield){    
                shield_health-=other.damage
                gamepad_set_vibration(0,1,1)
                if(shield_health &lt;= 0){
                    using_shield = false
                    audio_play_sound(snd_shield_down,1,false)
                }
            }else{
                current_health-=other.damage
                gamepad_set_vibration(0,1,1)
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!dying){
    other.current_health--
    audio_play_sound(snd_hit,1,false)
    if(!dashing){
        if(using_shield){    
            shield_health--
            gamepad_set_vibration(0,1,1)
            if(shield_health &lt;= 0){
                using_shield = false        
                audio_play_sound(snd_shield_down,1,false)
            }
        }else{
            current_health--
            gamepad_set_vibration(0,1,1)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dying){
    dead = true    
    image_speed = 0
    fade = instance_create(0,0,fx_fade_out)
    fade.change_room = main_menu
    gamepad_set_vibration(0,0,0)   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_x_offset = calculate_x_offset(x,y)
draw_y_offset = calculate_y_offset(x,y)

if(!dying &amp;&amp; !dead){
    draw_sprite_ext(spr_player_body_shadow,0,x,y,image_xscale,image_yscale,last_direction_moved,image_blend,image_alpha)
    draw_sprite_ext(spr_player_cannon_shadow,0,x,y,image_xscale,image_yscale,facing_direction,image_blend,image_alpha)
    
    draw_sprite_ext(spr_player_body,0,x+draw_x_offset*hover_height/2,y+draw_y_offset*hover_height/2,image_xscale,image_yscale,last_direction_moved,image_blend,image_alpha)
    
    if(selected_weapon == 0){
        if(shooting){
            image_speed = 10
            draw_sprite_ext(spr_player_cannon,image_index,x+draw_x_offset*hover_height,y+draw_y_offset*hover_height,image_xscale,image_yscale,facing_direction,image_blend,image_alpha)
        }else{
            image_speed = 0
            draw_sprite_ext(spr_player_cannon,0,x+draw_x_offset*hover_height,y+draw_y_offset*hover_height,image_xscale,image_yscale,facing_direction,image_blend,image_alpha)        
        }
    }else if(selected_weapon == 1){
        if(shooting){
            image_speed = 0
            draw_sprite_ext(spr_player_flamer,1,x+draw_x_offset*hover_height,y+draw_y_offset*hover_height,image_xscale,image_yscale,facing_direction,image_blend,image_alpha)
        }else{
            image_speed = 0
            draw_sprite_ext(spr_player_flamer,0,x+draw_x_offset*hover_height,y+draw_y_offset*hover_height,image_xscale,image_yscale,facing_direction,image_blend,image_alpha)        
        }        
    }
    
    if(charging_dash){    
        draw_sprite_ext(spr_dash_attack,0,(x+draw_x_offset + 16*dcos(facing_direction))*hover_height/2,(y+draw_y_offset + 16*dsin(-facing_direction))-hover_height,dash_power,dash_power,facing_direction,image_blend,image_alpha)
    }
    if(dashing){
        draw_sprite_ext(spr_dash_shield,0,x+draw_x_offset*hover_height/2,y+draw_y_offset*hover_height/2,image_xscale,image_yscale,dash_direction,image_blend,image_alpha)
    }
    
    if(using_shield){
        draw_sprite_ext(spr_player_shield,0,x+draw_x_offset*hover_height/2,y+draw_y_offset*hover_height/2,image_xscale,image_yscale,image_angle,image_blend,image_alpha)
    }
    
    if(instance_exists(obj_enemy_boss)){
        draw_sprite_ext(hud_boss_pointer,0,x+draw_x_offset*hover_height/2,y+draw_y_offset*hover_height/2,image_xscale,image_yscale,point_direction(x,y,obj_enemy_boss.x,obj_enemy_boss.y),image_blend,image_alpha)
    }
}else if(!dead){
    for(i = 0; i &lt; 6; i++){
        image_angle = irandom(360)
        draw_sprite_ext(fx_explosion_shadow,0,x,y,1,1,image_angle,image_blend,image_alpha)
        draw_sprite_ext(fx_explosion,0,x+draw_x_offset/2,y+draw_y_offset/2,1,1,image_angle,image_blend,image_alpha)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
